#!/usr/bin/env python

import argparse
import hashlib
import os
import sys
import textwrap

import vt
from colorama import Fore, init

init(autoreset=True)
b = Fore.BLUE
c = Fore.CYAN
w = Fore.WHITE
g = Fore.GREEN
y = Fore.YELLOW
r = Fore.RED

file_hash_err = r + "[-] Expected a path/to/file. Something went wrong. Please try again.\n"

VT_TOKEN = "371be95c742f82bd96c7782872161ff15c925d2e4dcde0841b3531cb0882dedb"

class CustomHelpFormatter(argparse.HelpFormatter):
    def _add_help(self, *args, **kwargs):
        pass

def banner():
    ascii = textwrap.dedent("""
    ███╗   ███╗ █████╗ ██╗     ██╗  ██╗ █████╗ ██████╗     
    █████╗████║██╔══██╗██║     ██║  ██║██╔══██╗██╔══██╗    
    ██╔████╔██║███████║██║     ███████║███████║██████╔╝    
    ██║╚██╔╝██║██╔══██║██║     ██╔══██║██╔══██║██╔══██╗    
    ██║ ╚═╝ ██║██║  ██║███████╗██║  ██║██║  ██║██║  ██║    
    ╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝    
    """)
    print(ascii.format(b, b, w, w, b, b, c, w))

def file_scanner(path):
    client = vt.Client(VT_TOKEN)

    try:
        with open(path, "rb") as f:
            if os.path.isfile(path):
                hash_value = hashlib.md5(f.read()).hexdigest()
                f.seek(0)
                client.scan_file(f)
                hash_obj = client.get_object(f"/files/{hash_value}")

                output = textwrap.dedent(f"""
                Analysis for: {y + os.path.basename(path) + Fore.RESET}

                First Submission Date: {hash_obj.first_submission_date}
                Last Submission Date: {hash_obj.last_submission_date}
                Times Submitted: {hash_obj.times_submitted}
                File Size: {hash_obj.size}
                File Type Description: {hash_obj.type_description}
                """)

                safety_message = g + "File is safe." if hash_obj.last_analysis_stats["malicious"] == 0 else r + "File is not safe. Threats detected."
                print(output)
                print(safety_message)
                f.close()

    except FileNotFoundError:
        print(file_hash_err)
        sys.exit("Exiting due to file not found")

    except Exception as e:
        print("An error occurred:", e)

    finally:
        client.close()

def main():
    if args.file_scan:
        file_scanner(path=args.file_scan)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        epilog="\tExample: \r\npython " + sys.argv[0] + " -scanf path/to/file",
        formatter_class=CustomHelpFormatter
    )

    parser.add_argument(
        "-scanf",
        dest="file_scan",
        help="File location to scan and detect malware and other breaches",
    )
    args = parser.parse_args()

    if len(sys.argv) < 2:
        banner()
        parser.print_usage()
        sys.exit(1)

    banner()
    main()
